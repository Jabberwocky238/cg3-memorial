#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import uuid
import random
import json

def generate_mock_articles():
    """生成50条模拟文章数据的SQL文件"""
    
    # 固定的用户ID
    uid = "OpStepcy9dQ428O0UooysgHT3bB3"
    
    # 标题模板
    titles = [
        "React Hooks Best Practices",
        "Vue 3 Composition API Guide", 
        "Node.js Microservices Architecture",
        "MySQL Performance Optimization",
        "Docker Container Deployment",
        "Flutter Cross-platform Development",
        "Machine Learning Algorithms",
        "Blockchain Smart Contracts",
        "CI/CD Automation Pipeline",
        "Web Application Security"
    ]
    
    # 内容模板 - TipTap JSON格式
    content_templates = [
        {
            "type": "doc",
            "content": [
                {
                    "type": "heading",
                    "attrs": {"textAlign": None, "level": 1},
                    "content": [
                        {
                            "type": "text",
                            "marks": [{"type": "bold"}],
                            "text": "React Hooks Best Practices"
                        }
                    ]
                },
                {
                    "type": "paragraph",
                    "attrs": {"textAlign": None},
                    "content": [
                        {
                            "type": "text",
                            "text": "This is an in-depth article about modern web development technologies, covering frontend frameworks, backend architecture, database design and more. Through practical examples and code samples, it helps developers better understand and apply these technologies."
                        }
                    ]
                }
            ]
        }
    ]
    
    # 标签模板 - 包含science, warfare, technology三种类型
    tag_templates = [
        {"topic": ["science", "frontend", "React"]},
        {"topic": ["warfare", "backend", "Node.js", "microservices"]},
        {"topic": ["technology", "database", "MySQL", "optimization"]},
        {"topic": ["science", "cloud-native", "Docker", "deployment"]},
        {"topic": ["warfare", "mobile", "Flutter", "cross-platform"]},
        {"topic": ["technology", "AI", "machine-learning", "algorithms"]},
        {"topic": ["science", "blockchain", "smart-contracts", "development"]},
        {"topic": ["warfare", "DevOps", "CI/CD", "automation"]}
    ]
    
    # 生成SQL语句
    articles_sql = []
    topics_sql = []
    
    for i in range(50):
        # 生成UUID作为文章ID
        aid = str(uuid.uuid4())
        
        # 随机选择标题
        title = random.choice(titles)
        
        # 随机选择内容
        content = random.choice(content_templates)
        # 更新内容中的标题以匹配选择的标题
        content["content"][0]["content"][0]["text"] = title
        
        # 随机选择标签
        tags = random.choice(tag_templates)
        
        # 转换为JSON字符串并转义双引号
        content_json = json.dumps(content, ensure_ascii=False).replace('\'', '\"')
        tags_json = json.dumps(tags, ensure_ascii=False).replace('\'', '\"')
        
        # 转义标题中的单引号
        title_escaped = title.replace("'", '"')
        
        # 生成文章SQL语句
        article_sql = f"""INSERT INTO articles (aid, uid, title, poster, content, chain, tags) VALUES ('{aid}', '{uid}', '{title_escaped}', '', '{content_json}', '{{}}', '{tags_json}');"""
        articles_sql.append(article_sql)
        
        # 生成topics SQL语句
        for topic in tags["topic"]:
            topic_escaped = topic.replace("'", "''")
            topic_sql = f"""INSERT INTO topics (topic, aid) VALUES ('{topic_escaped}', '{aid}');"""
            topics_sql.append(topic_sql)
    
    # 写入SQL文件
    with open('mock_data.sql', 'w', encoding='utf-8') as f:
        f.write('-- Mock data for articles and topics\n')
        f.write('-- Generated by generate_mock_articles.py\n\n')
        
        # 写入文章数据
        f.write('-- Articles data\n')
        for sql in articles_sql:
            f.write(sql + '\n')
        
        f.write('\n-- Topics data\n')
        # 写入topics数据
        for sql in topics_sql:
            f.write(sql + '\n')
    
    print(f"Successfully generated mock_data.sql with {len(articles_sql)} articles and {len(topics_sql)} topics")
    print("You can now run: npx wrangler d1 execute cg3 --local --file=mock_data.sql")

if __name__ == "__main__":
    generate_mock_articles()

# npx wrangler d1 execute cg3 --local --command="DELETE FROM articles;DELETE FROM topics;"
# npx wrangler d1 execute cg3 --local --command="DELETE FROM topics;"